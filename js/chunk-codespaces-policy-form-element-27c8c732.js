System.register(["./chunk-vendor.js"],function(){"use strict";var r,C,u,w;return{setters:[function(h){r=h.t,C=h.b,u=h.i,w=h.c}],execute:function(){var h=Object.defineProperty,D=Object.getOwnPropertyDescriptor,f=(e,t)=>h(e,"name",{value:t,configurable:!0}),i=(e,t,o,a)=>{for(var n=a>1?void 0:a?D(t,o):t,l=e.length-1,d;l>=0;l--)(d=e[l])&&(n=(a?d(t,o,n):d(n))||n);return a&&n&&h(t,o,n),n};const y="codespaces.allowed_machine_types",m="codespaces.allowed_port_privacy_settings";function p(e){e!==null&&(e.hidden=!0)}f(p,"hideElement");function c(e){e!==null&&(e.hidden=!1)}f(c,"showElement");const T="User",b="Repo";let s=class extends HTMLElement{constructor(){super(...arguments);this.constraint="",this.addedConstraintName="",this.constraintButtonName="",this.constraintButtonInfo="",this.existingPolicy="",this.existingPolicyConstraints="",this.removedConstraintName="",this.selector="",this.policyData={name:"",policyTargetType:T,policyConstraints:[]},this.machineTypeConstraint={name:y},this.portPrivacyConstraint={name:m}}connectedCallback(){const e=JSON.parse(this.machineTypeConstraintElement.getAttribute("data-value"));this.machineTypeConstraint={...e,allowable_values:e.allowable_values.map(a=>({...a,displayText:a.display_cpus}))};const t=JSON.parse(this.portPrivacyConstraintElement.getAttribute("data-value"));this.portPrivacyConstraint={...t,allowable_values:t.allowable_values.map(a=>({...a,displayText:a.display_name}))};const o=this.constraintList.getAttribute("data-existing-policy");o!==null&&(this.policyData={...JSON.parse(o),policyConstraints:JSON.parse(this.constraintList.getAttribute("data-existing-policy-constraints"))||[],policyTargetType:this.fetchPolicyTargetType()})}handlePolicyNameChange(e){const t=e.currentTarget;this.policyData={...this.policyData,name:t.value.trim()},this.hidePolicyNameGroupErrors(),this.updateSaveButton()}validatePolicyNameChange(e){const t=e.currentTarget;if(t.value.trim().length===0){this.policyNameFormGroup.classList.add("errored"),c(this.policyNameShortNameError);return}if(t.value.trim().length>64){this.policyNameFormGroup.classList.add("errored"),c(this.policyNameLongNameError);return}this.hidePolicyNameGroupErrors()}hidePolicyNameGroupErrors(){this.policyNameFormGroup.classList.remove("errored"),p(this.policyNameShortNameError),p(this.policyNameLongNameError)}addConstraint(e){const t=e.currentTarget,o=JSON.parse(t.getAttribute("data-constraint-button-info"));o!==null&&(this.addConstraintToPolicyFormData(o),this.handleDisplayedDefaultsForPolicyConstraint(o),this.showConstraintListRow(o.name),this.hideAddConstraintButton(o.name),p(this.addConstraintInfo),this.addConstraintDropdownList.open=!1,this.updateSaveButton())}updateSaveButton(){this.policyData.policyConstraints.length>0&&this.policyData.name?this.saveButton.disabled=!1:this.saveButton.disabled=!0}addConstraintToPolicyFormData(e){var t;this.policyData={...this.policyData,policyConstraints:this.policyData.policyConstraints.concat({...e,allowed_values:(t=e.allowable_values)==null?void 0:t.map(o=>o.name)})}}handleDisplayedDefaultsForPolicyConstraint(e){switch(e.name){case y:this.showAllAllowedValuesTextFor(y),this.checkAllAllowableValues(y);break;case m:this.showAllAllowedValuesTextFor(m),this.checkAllAllowableValues(m);break}}handleDisplayingAllowedValuesTextForConstraint(e,t){var o;let a=null,n=null,l=null;switch(e){case y:a=this.selectedAllowedValuesTextForMachineTypes,n=this.noSelectedAllowedValuesTextForMachineTypes,l=this.machineTypeConstraint;break;case m:a=this.selectedAllowedValuesTextForPortPrivacySettings,n=this.noSelectedAllowedValuesTextForPortPrivacySettings,l=this.portPrivacyConstraint;break;default:return}if(t.length===0){c(n),p(a);return}t.length>0&&(a.textContent=((o=l==null?void 0:l.allowable_values)==null?void 0:o.filter(d=>t.includes(d.name)).map(d=>d.displayText).join(", "))||"",c(a),p(n))}showAllAllowedValuesTextFor(e){var t;let o=null,a=null,n=null;switch(e){case y:o=this.selectedAllowedValuesTextForMachineTypes,a=this.noSelectedAllowedValuesTextForMachineTypes,n=this.machineTypeConstraint;break;case m:o=this.selectedAllowedValuesTextForPortPrivacySettings,a=this.noSelectedAllowedValuesTextForPortPrivacySettings,n=this.portPrivacyConstraint;break;default:return}o.textContent=((t=n==null?void 0:n.allowable_values)==null?void 0:t.map(l=>l.displayText).join(", "))||"",c(o),p(a)}checkAllAllowableValues(e){let t;switch(e){case y:t=this.constraintAllowableValueCheckboxesForMachineTypes;break;case m:t=this.constraintAllowableValueCheckboxesForPortPrivacySettings;break;default:t=[]}for(const o of t)o.checked=!0}selectAllowableValueForConstraint(e){var t;const o=e.currentTarget,a=o.getAttribute("data-constraint-name"),n=o==null?void 0:o.value,l=this.findConstraintIndexInPolicyData(a);if(!(l!==-1))return;const g=this.policyData.policyConstraints[l],P=(t=g.allowed_values)==null?void 0:t.find(v=>v===n),x=g.allowed_values||[],A=P?x.filter(v=>v!==n):x.concat(n);this.policyData={...this.policyData,policyConstraints:[...this.policyData.policyConstraints.slice(0,l),{...g,allowed_values:A},...this.policyData.policyConstraints.slice(l+1)]},this.handleDisplayingAllowedValuesTextForConstraint(a,A)}findConstraintIndexInPolicyData(e){return this.policyData.policyConstraints.findIndex(t=>t.name===e)}removeConstraint(e){const t=e.currentTarget,o=JSON.parse(t.getAttribute("data-removed-constraint-name"));if(o===null)return;const a=this.policyData.policyConstraints.findIndex(n=>n.name===o.name);this.policyData={...this.policyData,policyConstraints:[...this.policyData.policyConstraints.slice(0,a),...this.policyData.policyConstraints.slice(a+1)]},this.hideConstraintListRow(o.name),this.showAddConstraintButton(o.name),this.policyData.policyConstraints.length===0&&c(this.addConstraintInfo),this.updateSaveButton()}hideConstraintListRow(e){for(const t of this.activeConstraintsListRows)t.getAttribute("data-added-constraint-name")===e&&p(t)}showConstraintListRow(e){for(const t of this.activeConstraintsListRows)t.getAttribute("data-added-constraint-name")===e&&c(t)}showAddConstraintButton(e){for(const t of this.addConstraintButtons)t.getAttribute("data-constraint-button-name")===e&&c(t)}hideAddConstraintButton(e){for(const t of this.addConstraintButtons)t.getAttribute("data-constraint-button-name")===e&&p(t)}selectRepositories(){const e=this.querySelectorAll('input[name="enable[]"][data-form-field-name="codespaces-policy-group-target-repo-ids"]'),t=[];for(const o of e)t.push(parseInt(o.value));this.selectedRepositoriesCountTextElement.textContent=`${e.length.toString()} selected`,c(this.selectedRepositoriesCountTextElement)}changeRepositoriesTargetType(){const e=this.policyData.policyTargetType,t=this.fetchPolicyTargetType();switch(e!==t&&(this.policyData={...this.policyData,policyTargetType:t}),t){case T:p(this.dynamicRepositorySelectionEl),p(this.selectedRepositoriesDescriptionEl),c(this.allRepositoriesDescriptionEl);break;case b:p(this.allRepositoriesDescriptionEl),c(this.dynamicRepositorySelectionEl),c(this.selectedRepositoriesDescriptionEl),this.selectRepositories();break}}fetchPolicyTargetType(){var e,t;switch((t=(e=this.repositoriesTargetSelector.querySelector('[data-selector="policy-selection"]'))==null?void 0:e.textContent)==null?void 0:t.trim()){case"All repositories":return T;case"Selected repositories":return b;default:return T}}async savePolicy(e){c(this.spinnerElement);const t=e.currentTarget,o=t.getAttribute("data-csrf")||"",a=t.getAttribute("data-submit-url")||"",n=t.getAttribute("data-redirect-url")||"";let l="post";const d=this.buildFormData(o);this.policyData.id&&(l="put");try{(await fetch(a,{method:l,body:d,headers:{Accept:"application/json","X-Requested-With":"XMLHttpRequest"}})).status===200?window.location.href=n:(p(this.spinnerElement),c(this.saveErrorElement))}catch{p(this.spinnerElement),c(this.saveErrorElement)}}buildFormData(e){const t=new FormData;t.set("authenticity_token",e),t.append("policy_group[name]",this.policyData.name),t.append("policy_group[all_repositories]",JSON.stringify(this.policyData.policyTargetType===T));const o=document.querySelectorAll('input[name="enable[]"][data-form-field-name="codespaces-policy-group-target-repo-ids"]');for(const a of o)t.append("policy_group[repository_ids][]",a.value);for(const a of this.policyData.policyConstraints)if(t.append("policy_group[constraints][][name]",a.name),a.allowed_values)for(const n of a.allowed_values)t.append("policy_group[constraints][][value][]",n);return t}};f(s,"CodespacesPolicyFormElement"),i([r],s.prototype,"policyNameFormGroup",2),i([r],s.prototype,"policyNameShortNameError",2),i([r],s.prototype,"policyNameLongNameError",2),i([r],s.prototype,"constraintList",2),i([r],s.prototype,"addConstraintInfo",2),i([r],s.prototype,"addConstraintDropdownList",2),i([r],s.prototype,"saveButton",2),i([r],s.prototype,"saveErrorElement",2),i([r],s.prototype,"spinnerElement",2),i([C],s.prototype,"activeConstraintsListRows",2),i([C],s.prototype,"addConstraintButtons",2),i([r],s.prototype,"machineTypeConstraintElement",2),i([r],s.prototype,"noSelectedAllowedValuesTextForMachineTypes",2),i([r],s.prototype,"selectedAllowedValuesTextForMachineTypes",2),i([C],s.prototype,"constraintAllowableValueCheckboxesForMachineTypes",2),i([r],s.prototype,"portPrivacyConstraintElement",2),i([r],s.prototype,"noSelectedAllowedValuesTextForPortPrivacySettings",2),i([r],s.prototype,"selectedAllowedValuesTextForPortPrivacySettings",2),i([C],s.prototype,"constraintAllowableValueCheckboxesForPortPrivacySettings",2),i([r],s.prototype,"selectedRepositoriesCountTextElement",2),i([r],s.prototype,"repositoriesTargetSelector",2),i([r],s.prototype,"dynamicRepositorySelectionEl",2),i([r],s.prototype,"allRepositoriesDescriptionEl",2),i([r],s.prototype,"selectedRepositoriesDescriptionEl",2),i([u],s.prototype,"constraint",2),i([u],s.prototype,"addedConstraintName",2),i([u],s.prototype,"constraintButtonName",2),i([u],s.prototype,"constraintButtonInfo",2),i([u],s.prototype,"existingPolicy",2),i([u],s.prototype,"existingPolicyConstraints",2),i([u],s.prototype,"removedConstraintName",2),i([u],s.prototype,"selector",2),s=i([w],s)}}});
//# sourceMappingURL=chunk-codespaces-policy-form-element-0f68b969.js.map
